# Example 1 : merge K list

     /* Let l1.size + l2.size = n, then W(n) ~ O(n) */
    ListNode* merge(ListNode* l1, ListNode* l2) {
        ListNode dummy(0);

        ListNode *curr = &dummy;
        while( l1 && l2 ) {
            if( l1->val < l2->val ) {
                curr->next = l1;
                l1 = l1->next;
            } else {
                curr->next = l2;
                l2 = l2->next;
            }
            curr = curr->next;
        }

        curr->next = l1 ? l1 : l2;

        return dummy.next;
    }

    /* W(n) ~ O(nlog(k)) */
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if( lists.size() == 0 ) return nullptr;
        if( lists.size() == 1 ) return lists.front();
        if( lists.size() == 2 ) return merge(lists.front(), lists.back());

        int mid = lists.size() / 2;
        vector<ListNode*> frontPart(lists.begin(), lists.begin() + mid);
        vector<ListNode*> backPart(lists.begin() + mid, lists.end());

        return merge(mergeKLists(frontPart), mergeKLists(backPart));
    }
