// need for plugins
buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
  }
}

allprojects {
  // need for custom root tasks
  apply plugin: 'java-library'
  apply plugin: 'jacoco'         // coverage

  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
  }
}

subprojects {
  // here, java-library and jacoco are redundant. Just keep it for clarity
  apply plugin: 'java-library'
  apply plugin: 'checkstyle'     // lint
  apply plugin: 'jacoco'         // coverage
  apply plugin: 'maven-publish'  // publish
  apply plugin: 'com.github.johnrengelman.shadow' // shadow jar

  def projectName = "custom-" + project.name

  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
  }

  dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"

    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    runtimeOnly "ch.qos.logback:logback-classic:${logbackVersion}"

    testImplementation "org.projectlombok:lombok:${lombokVersion}"
    testImplementation "junit:junit:${junitVersion}"
  }


  /* java-library */

  java {
    sourceCompatibility = sourceJavaVersion
    targetCompatibility = targetJavaVersion
    compileJava.options.encoding = "UTF-8"
    compileTestJava.options.encoding = "UTF-8"
    withSourcesJar()
    withJavadocJar()
  }

  javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
      options.addBooleanOption('html5', true)
    }
  }


  /* checkstyle */

  checkstyle {
    toolVersion checkstyleVersion
    sourceSets = [project.sourceSets.main] // exclude test codes
    configFile = file("${project.rootProject.projectDir}/checkstyle.xml")
  }

  // custom lint task
  task lint {
    dependsOn check
  }


  /* jacoco */

  jacoco {
    toolVersion jacocoVersion
  }

  jacocoTestReport {
    dependsOn test   // default : not depends on test
    reports {
      xml.enabled = true
      html.enabled = true
      csv.enabled false
      xml.destination file("${buildDir}/reports/jacoco/report.xml")
    }
  }

  // custom coverage task
  task coverage {
    dependsOn jacocoTestReport
  }


  /* maven-publish */

  publishing {
    publications {
      maven(MavenPublication) {
        // groupId, version is automatically generated
        // corresponding to project.groupId and project.version
        artifactId = projectName
        from components.java

        // optional : custom pom file
        pom {
          name = 'My Library'
          description = 'A concise description of my library'
          url = 'http://www.example.com/library'
          licenses {
            license {
              name = 'The Apache License, Version 2.0'
              url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }
          developers {
            developer {
              id = 'acktsap'
              name = 'Taeik Lim'
              email = 'sibera21@gmail.com'
            }
          }
          scm {
            connection = 'scm:git:git://example.com/my-library.git'
            developerConnection = 'scm:git:ssh://example.com/my-library.git'
            url = 'http://example.com/my-library/'
          }
        }
      }
    }

    // optional : custom repository config
    repositories {
      maven {
        def releasesRepoUrl = "https://buildDir/repos/releases"
        def snapshotsRepoUrl = "https://buildDir/repos/snapshots"
        url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        credentials {
          // cat ~/.gradle/gradle.properties prints
          // systemProp.mavenUser=someuser
          // systemProp.mavenPassword=somepassword
          //
          // or you can use
          // ./gradlew publish -DmavenUser=user -DmavenPassword=password
          username System.getProperty("mavenUser")
          password System.getProperty("mavenPassword")
        }
      }
    }
  }

  // install task
  task install {
    dependsOn publishToMavenLocal
  }

}


/* root tasks */

task allcoverage(type: JacocoReport) {
  def targetProjects = subprojects.findAll {
    // exclude library-tools project. This is an example
    it.name != 'library-tools'
  }
  dependsOn = targetProjects.coverage
  targetProjects.each { sourceSets it.sourceSets.main }
  executionData.from = files(targetProjects.jacocoTestReport.executionData)
  reports {
    xml.enabled = true
    html.enabled = true
    csv.enabled false
    xml.destination file("${buildDir}/reports/jacoco/report.xml")
  }
}

task alljavadoc(type: Javadoc) {
  def targetProjects = subprojects;
  source targetProjects.collect { it.sourceSets.main.allJava }
  classpath = files(targetProjects.collect { it.sourceSets.main.compileClasspath })
  destinationDir = file("${buildDir}/docs/javadoc")
  if (JavaVersion.current().isJava9Compatible()) {
    options.addBooleanOption('html5', true)
  }
}

